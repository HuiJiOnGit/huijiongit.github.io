<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>dotnetcore控制台使用依赖注入和logger和configuration</title>
      <link href="2020/10/13/dotnetcore-kong-zhi-tai-shi-yong-yi-lai-zhu-ru-he-logger-he-configuration/"/>
      <url>2020/10/13/dotnetcore-kong-zhi-tai-shi-yong-yi-lai-zhu-ru-he-logger-he-configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="dotnet-core-3-1在控制台使用依赖注入，logger和configuration"><a href="#dotnet-core-3-1在控制台使用依赖注入，logger和configuration" class="headerlink" title="dotnet core 3.1在控制台使用依赖注入，logger和configuration"></a>dotnet core 3.1在控制台使用依赖注入，logger和configuration</h1><ol><li><p>添加<code>IServiceCollection</code></p><pre class=" language-c#"><code class="language-c#">//会用上的命名空间using Microsoft.Extensions.DependencyInjection;IServiceCollection services = new ServiceCollection();// 然后就可以像在asp.net core 里面的 注入了</code></pre></li></ol><ol start="2"><li><p>创建<code>servicesProvider</code>实列</p><pre class=" language-c#"><code class="language-c#">//创建服务 var servicesProvider = services.BuildServiceProvider();</code></pre></li></ol><ol start="3"><li>在控制台中获取注入</li></ol><pre class=" language-c#"><code class="language-c#">var airServices = servicesProvider.GetService<AirWalkServices>();</code></pre><ol start="4"><li>在其他文件中注入和asp.net core同理，在构造函数中注入即可</li><li>使用log</li></ol><pre class=" language-c#"><code class="language-c#">//启用日志,记得是在创建servicesProvider实列之前services.AddLogging(builder => builder.AddConsole());//使用loggervar logger = servicesProvider.GetService<ILoggerFactory>().CreateLogger<Program>();logger.LogInformation("start app");//其他文件中使用直接注入即可</code></pre><blockquote><p>注意，这里的 <code>builder.AddConsole()</code>可能垃圾VS没有提示，需要安装这个包</p><p><code>Microsoft.Extensions.Logging.Console</code></p></blockquote><p>如果需要使用其它log，把log记录到日志，数据库，建议使用第三方log</p><blockquote><p>例子：<a href="https://mp.weixin.qq.com/s/rg3JbwPY7zNx6UPKEBIIuA">https://mp.weixin.qq.com/s/rg3JbwPY7zNx6UPKEBIIuA</a></p></blockquote><ol start="6"><li>使用config</li></ol><p>需要引用这个几个包，VS大概率又又又没提示</p><blockquote><pre><code>Microsoft.Extensions.Configuration.FileExtensionsMicrosoft.Extensions.Configuration.Json</code></pre></blockquote><pre class=" language-c#"><code class="language-c#">IConfiguration configuration = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())                    .AddJsonFile("appsettings.json")                    .Build(); services.AddSingleton(configuration);//Directory.GetCurrentDirectory()这个方法根据微软文档的说法，如果是windows服务的程序，获取的是c盘system文件夹，暂时找不到链接了</code></pre><p>使用同直接注入就行</p><pre class=" language-c#"><code class="language-c#">private readonly IConfiguration _configuration;public Class1(IConfiguration configuration)&#123;    _configuration = configuration;&#125;</code></pre><p>同理也可以使用其他的json文件</p><pre class=" language-c#"><code class="language-c#">IConfiguration tempConfig = new ConfigurationBuilder().SetBasePath(Directory.GetCurrentDirectory())                    .AddJsonFile("你的json文件")                    .Build();//然后我把它注入到了这个TemplateDto类services.Configure<TemplateDto>(tempConfig);</code></pre><p>调用</p><pre class=" language-c#"><code class="language-c#">private readonly IOptions<TemplateDto> _options;public Class1(IOptions<TemplateDto> options)&#123;    _options = options;&#125;</code></pre><p>以上，完成</p><p>2020-10-9 10:48 第一版</p>]]></content>
      
      
      <categories>
          
          <category> dotnetcore </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dotnetcore .netcore </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c#对文件进行压缩</title>
      <link href="2020/10/13/c-dui-wen-jian-jin-xing-ya-suo/"/>
      <url>2020/10/13/c-dui-wen-jian-jin-xing-ya-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="c-压缩文件成zip"><a href="#c-压缩文件成zip" class="headerlink" title="c# 压缩文件成zip"></a>c# 压缩文件成zip</h1><blockquote><p>本篇资料引用  <a href="https://docs.microsoft.com/zh-cn/dotnet/api/system.io.compression.zipfile?view=netcore-3.1">微软文档</a></p><blockquote><p>真的建议大家过看看微软的官方文档，啥都有</p></blockquote></blockquote><p>c# 内置了几个处理压缩的类，详细见上面的链接，都是在<code>system.IO.Compression</code>这个命名空间下</p><p><code>zipfile</code>使用心得，都是从目录入手，对目录文件进行压缩，也就是说要先有文件，才能压缩，应该有对<code>byte[]</code>和<code>stream</code>直接进行压缩的类，但是我没有找到</p><p>官方列子</p><pre class=" language-c#"><code class="language-c#">using System;using System.IO.Compression;class Program&#123;    static void Main(string[] args)    &#123;        string startPath = @".\start";        string zipPath = @".\result.zip";        string extractPath = @".\extract";        ZipFile.CreateFromDirectory(startPath, zipPath);        ZipFile.ExtractToDirectory(zipPath, extractPath);    &#125;&#125;</code></pre><p>很明显的用法，<code>CreateFromDirectory</code> 方法就是从这个<code>startPath</code>目录创建压缩文件，<code>zipPath</code>就是要输出的目录，<em>注意：这两个最好在不同的目录，否则会出现文件被占用的错误</em></p><p>ExtractToDirectory 同理相反着用</p><p>附上我当时写的，因为本意是将byte[]直接压缩的，但是，出来的效果就是把.xlsx的后缀名换了个名字，无奈之下只能这样先保存了在压缩，再让浏览器下载</p><pre class=" language-c#"><code class="language-c#">        /// <summary>        /// 将byte压缩        /// </summary>        /// <param name="fileName">文件保存的名字</param>        /// <param name="zipFileNmae">压缩文件的名字</param>        /// <param name="sourceByte">字节</param>        /// <param name="webrootPath">wwwroot目录</param>        /// <returns>压缩后的文件路劲</returns>        public static string CompressToZIP(string fileName,string zipFileNmae,byte[] sourceByte,string webrootPath)        &#123;            var basePath = webrootPath;            var tempFolder = "temp";            var xlsxTempFolder = "Excel";            var zipTempFolder = "Zip";            var tempXlsxPath = Path.Combine(basePath, tempFolder, xlsxTempFolder);            var tempZipPath = Path.Combine(basePath, tempFolder, zipTempFolder);            if (!Directory.Exists(tempXlsxPath))            &#123;                Directory.CreateDirectory(tempXlsxPath);            &#125;            if (!Directory.Exists(tempZipPath))            &#123;                Directory.CreateDirectory(tempZipPath);            &#125;            DeleteDirAllFile(tempXlsxPath);            DeleteDirAllFile(tempZipPath);            var filePath = Path.Combine(tempXlsxPath, fileName);            var zipFilePath = Path.Combine(tempZipPath, zipFileNmae);            SaveTempExcel(sourceByte, filePath);            ZipFile.CreateFromDirectory(tempXlsxPath, zipFilePath, System.IO.Compression.CompressionLevel.Optimal, false);            return zipFilePath;        &#125;        /// <summary>        /// 将byte保存为文件        /// </summary>        /// <param name="buff"></param>        /// <param name="savepath"></param>        public static void SaveTempExcel(byte[] buff, string savepath)        &#123;            if (System.IO.File.Exists(savepath))            &#123;                System.IO.File.Delete(savepath);            &#125;            FileStream fs = new FileStream(savepath, FileMode.Create);            BinaryWriter bw = new BinaryWriter(fs);            bw.Write(buff, 0, buff.Length);            bw.Close();            fs.Close();        &#125;        /// <summary>        /// 将文件转换为byte数组        /// </summary>        /// <param name="path">文件地址</param>        /// <returns>转换后的byte数组</returns>        public static byte[] File2Bytes(string path)        &#123;            if (!System.IO.File.Exists(path))            &#123;                return new byte[0];            &#125;            FileInfo fi = new FileInfo(path);            byte[] buff = new byte[fi.Length];            FileStream fs = fi.OpenRead();            fs.Read(buff, 0, Convert.ToInt32(fs.Length));            fs.Close();            return buff;        &#125;        /// <summary>        /// 删除文件夹下的所有文件        /// </summary>        /// <param name="dirRoot">删除path</param>        public static void DeleteDirAllFile(string dirRoot)        &#123;            DirectoryInfo aDirectoryInfo = new DirectoryInfo(dirRoot);            FileInfo[] files = aDirectoryInfo.GetFiles("*.*", SearchOption.AllDirectories);            foreach (FileInfo f in files)            &#123;                File.Delete(f.FullName);            &#125;        &#125;</code></pre><blockquote><p>理论上应该还是直接返回流下载，返回压缩的流最好，因为我在搜索过程中，发现有些人的生产环境没有创建文件的权限的</p></blockquote><p>文章很简单，能力有限，请有更好的想法的，欢迎留言</p>]]></content>
      
      
      <categories>
          
          <category> c# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/20/hello-world/"/>
      <url>2020/09/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
